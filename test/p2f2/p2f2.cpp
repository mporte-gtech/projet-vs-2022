// ============================================================================
// Partie II – Feuille 2
// ----------------------------------------------------------------------------
// IMPORTANT : NE PAS EXÉCUTER. Faire UNIQUEMENT la trace mémoire (Google Sheet « Mémoire »).
// Ces fragments de code servent de support à la représentation mémoire.
// ============================================================================

// ============================================================================
// main1 — Manipulation de plusieurs pointeurs
// ============================================================================
int main1()
{
    int x = 3;
    int y = 7;
    int* p = &x;
    *p = 4;
    p = &y;
    *p = 8;
    return 0;
}

// ============================================================================
// main2 — Assignation de valeurs via des pointeurs
// ============================================================================
int main2()
{
    int a = 5;
    int b = 6;
    int* p1 = &a;
    int* p2 = &b;
    *p1 = *p2;
    *p2 = 9; // b change, a reste à 6
    return 0;
}

// ============================================================================
// main3 — Réaffectation de pointeurs (aliasing)
// ============================================================================
int main3()
{
    int i = 1;
    int j = 2;
    int* p1 = &i;
    int* p2 = &j;
    i = 100;
    p1 = p2;
    *p1 = 3;
    return 0;
}

// ============================================================================
// main4 — Utilisation de double pointeur
// ============================================================================
int main4()
{
    int i = 2;
    int* p1 = &i;
    int** p2 = &p1;
    **p2 = 9;
    return 0;
}

// ============================================================================
// main5 — Chaînage de double pointeurs
// ============================================================================
int main5()
{
    int i = 2;
    int j = 3;
    int* p1 = &i;
    int* p2 = &j;
    int** p3 = &p1;
    *p3 = p2;
    **p3 = 9;
    return 0;
}

// ============================================================================
// main6 — Modification d’un caractère par un pointeur
// ============================================================================
int main6()
{
    char c = 'a';
    char* pc = &c;
    *pc = 98;
    return 0;
}

// ============================================================================
// main7 — Incrémentation et modification d'adresse
// ============================================================================
int main7()
{
    char c1 = 'a';
    char c2 = 'b';
    char c3 = 'c';
    char* pc = &c1;

    *pc = 'x';
    pc += 1;
    *pc = 'y';
    pc += 1;
    *pc = 'z';

    return 0;
}
